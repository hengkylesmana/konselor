document.addEventListener('DOMContentLoaded', () => {
    // === DOM ELEMENT SELECTION ===
    const chatContainer = document.getElementById('chat-container');
    const userInput = document.getElementById('user-input');
    const sendBtn = document.getElementById('send-btn');
    const voiceBtn = document.getElementById('voice-btn');
    const endChatBtn = document.getElementById('end-chat-btn');
    const statusDiv = document.getElementById('status');
    const startOverlay = document.getElementById('start-overlay');
    const startCurhatBtn = document.getElementById('start-curhat-btn');
    const startTestBtn = document.getElementById('start-test-btn');
    const startDoctorBtn = document.getElementById('start-doctor-btn');
    const startSpiritualBtn = document.getElementById('start-spiritual-btn');
    const header = document.querySelector('header');
    const headerTitle = document.getElementById('header-title');
    const headerSubtitle = document.getElementById('header-subtitle');
    const doctorInfoBox = document.getElementById('doctor-info-box');
    const doctorInfoClose = document.getElementById('doctor-info-close');
    const spiritualInfoBox = document.getElementById('spiritual-info-box');
    const spiritualInfoClose = document.getElementById('spiritual-info-close');
    
    // === APPLICATION STATE ===
    let conversationHistory = []; 
    let speechVoices = [];
    let abortController = null;
    let recognition = null;
    let isRecording = false;
    let audioContext = null;
    let userName = '', userGender = 'Pria', userAge = '';
    let isOnboarding = false;
    let isTesting = false;
    let currentTestType = null;
    let testData = {};
    let testScores = {};
    let currentTestQuestionIndex = 0;
    let currentMode = 'psychologist'; 

    // === DATA (akan diisi dari file eksternal) ===
    let fullTestData = {};

    // === INITIALIZATION & EVENT LISTENERS ===
    function init() {
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js').catch(err => console.log('SW reg failed: ', err));
            });
        }
        loadVoices();
        displayInitialMessage();
        updateButtonVisibility();

        startCurhatBtn.addEventListener('click', () => initializeApp({ isCurhat: true }));
        startSpiritualBtn.addEventListener('click', () => initializeApp({ isSpiritual: true }));
        startTestBtn.addEventListener('click', () => initializeApp({ isTest: true }));
        startDoctorBtn.addEventListener('click', () => initializeApp({ isDoctor: true }));
        
        doctorInfoClose.addEventListener('click', () => { doctorInfoBox.style.display = 'none'; });
        spiritualInfoClose.addEventListener('click', () => { spiritualInfoBox.style.display = 'none'; });

        header.addEventListener('click', () => window.location.reload());
        
        sendBtn.addEventListener('click', handleSendMessage);
        voiceBtn.addEventListener('click', toggleMainRecording);
        endChatBtn.addEventListener('click', handleCancelResponse);
        userInput.addEventListener('input', updateButtonVisibility);
        userInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                handleSendMessage();
            }
        });
    }
    
    function initializeApp(mode = {}) {
        if (!audioContext) {
            try {
                audioContext = new (window.AudioContext || window.webkitAudioContext)();
            } catch(e) { console.error("Web Audio API not supported."); }
        }
        startOverlay.classList.add('hidden');
        chatContainer.innerHTML = ''; // Membersihkan chat setiap kali mode baru dipilih
        
        doctorInfoBox.style.display = 'none';
        spiritualInfoBox.style.display = 'none';
        
        if (mode.isTest) {
            currentMode = 'psychologist';
            headerTitle.textContent = "Tes Kepribadian dan Potensi Diri";
            headerSubtitle.textContent = "Namaku RASA, bersamamu sebagai Konselor";
            isTesting = true;
            initiatePersonalityTest();
        } else if (mode.isDoctor) {
            currentMode = 'doctor';
            headerTitle.textContent = "Tanya ke Dokter AI";
            headerSubtitle.textContent = "Namaku RASA, bersamamu sebagai Dokter Profesional";
            doctorInfoBox.style.display = 'block';
            isTesting = false; 
            isOnboarding = false;
            const welcomeMessage = "Halo, saya Dokter AI RASA. Ada keluhan medis yang bisa saya bantu?";
            displayMessage(welcomeMessage, 'ai');
            speakAsync(welcomeMessage);
        } else if (mode.isSpiritual) {
            currentMode = 'spiritual';
            headerTitle.textContent = "Tanya ke Spiritual AI";
            headerSubtitle.textContent = "Namaku RASA, bersamamu sebagai Konselor Spiritual";
            spiritualInfoBox.style.display = 'block'; 
            isTesting = false; 
            isOnboarding = false; 
            const welcomeMessage = "Assalamualaikum, saya siap membantu Anda menemukan rujukan islami atau literasi jawaban permasalahan seputar islam?";
            displayMessage(welcomeMessage, 'ai');
            speakAsync(welcomeMessage);
        } else { // Default (Psikolog)
            currentMode = 'psychologist';
            headerTitle.textContent = "Tanya ke Psikolog AI";
            headerSubtitle.textContent = "Namaku RASA, bersamamu sebagai Psikolog Profesional";
            isTesting = false; 
            startOnboardingIfNeeded();
        }
    }

    async function startOnboardingIfNeeded() {
        // ... (Logika onboarding tetap sama)
    }

    // === PERSONALITY TEST LOGIC ===
    async function initiatePersonalityTest() {
        if (Object.keys(fullTestData).length === 0) {
            try {
                const response = await fetch('testData.json');
                if (!response.ok) throw new Error('Gagal memuat data tes.');
                fullTestData = await response.json();
            } catch (error) {
                console.error(error);
                displayMessage("Maaf, fitur tes sedang tidak tersedia.", 'ai-system');
                isTesting = false;
                return;
            }
        }
        
        currentTestType = 'selection';
        const introMessage = `Selamat datang di Tes Kepribadian dan Potensi Diri.\n\nTes ini menawarkan dua pendekatan untuk membantu Anda lebih mengenal diri:\n- **Pendekatan STIFIn:** Berbasis konsep kecerdasan genetik.\n- **Pendekatan MBTI:** Mengidentifikasi preferensi Anda dalam melihat dunia.\n\n---\n\n***Disclaimer:*** *Tes ini adalah pengantar. Untuk hasil yang komprehensif, disarankan untuk mengikuti tes di Layanan Psikologi Profesional.*\n\nPendekatan mana yang lebih menarik untukmu? [PILIHAN:Pendekatan STIFIn|Pendekatan MBTI]`;
        displayMessage(introMessage, 'ai');
        speakAsync("Selamat datang di tes kepribadian. Silakan pilih pendekatan yang ingin Anda gunakan.");
    }

    function startActualTest(type) {
        // ... (Logika memulai tes yang sebenarnya)
    }

    function displayNextTestQuestion() {
        // ... (Logika menampilkan pertanyaan tes berikutnya)
    }

    function processTestAnswer(choice) {
        // ... (Logika memproses jawaban tes)
    }

    function calculateAndDisplayResult(drive) {
        // ... (Logika menghitung dan menampilkan hasil tes)
    }

    // === CORE CHAT & UI FUNCTIONS ===
    async function handleSendMessage() {
        if (isRecording) return;
        const userText = userInput.value.trim();
        if (!userText) return;

        displayMessage(userText, 'user');
        userInput.value = '';
        updateButtonVisibility();
        
        await getAIResponse(userText, userName, userGender, userAge);
    }
    
    function handleSendMessageWithChoice(choice) {
        displayMessage(choice, 'user');
        if (isTesting) {
            if (currentTestType === 'selection') {
                startActualTest(choice);
            } else {
                processTestAnswer(choice);
            }
        } else {
            getAIResponse(choice, userName, userGender, userAge);
        }
    }

    /**
     * PERBAIKAN UTAMA: Logika tombol disempurnakan seperti maucurhat.netlify.app
     */
    function updateButtonVisibility() {
        const isTyping = userInput.value.trim().length > 0;

        if (isRecording || isTesting || isOnboarding) {
            sendBtn.style.display = 'none';
            voiceBtn.style.display = 'none';
        } else if (isTyping) {
            sendBtn.style.display = 'flex';
            voiceBtn.style.display = 'none';
        } else {
            sendBtn.style.display = 'none';
            voiceBtn.style.display = 'flex';
        }
    }

    function handleCancelResponse() { /* ... */ }
    function toggleMainRecording() { /* ... */ }
    function startRecording() { /* ... */ }
    function stopRecording() { /* ... */ }

    async function getAIResponse(prompt, name, gender, age) {
        // ... (Fungsi ini menggunakan logika dari file chat.js yang Anda unggah)
    }

    function loadVoices() {
        if (!('speechSynthesis' in window)) return;
        speechVoices = window.speechSynthesis.getVoices();
        if (speechVoices.length === 0) {
            window.speechSynthesis.onvoiceschanged = () => { speechVoices = window.speechSynthesis.getVoices(); };
        }
    }
    
    function speakAsync(text) {
        // ... (Fungsi suara stabil menggunakan API browser)
    }

    function playSound(type) { /* ... */ }
    function displayInitialMessage() { /* ... */ }
    function displayMessage(message, sender) { /* ... */ }
    
    init();
});
